/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package devman.gui;

import devman.SDevManConsts;
import devman.mod.SModConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDlgGuiTime extends SBeanFormDialog {

    /**
     * Creates new form SDlgGuiTime
     */
    public SDlgGuiTime(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.XX_GUI_TME, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlHour = new javax.swing.JLabel();
        moIntHour = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel5 = new javax.swing.JPanel();
        jlMinute = new javax.swing.JLabel();
        moIntMinute = new sa.lib.gui.bean.SBeanFieldInteger();

        setTitle("Cálculo de tiempo");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros de tiempo:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlHour.setText("Horas:");
        jlHour.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlHour);
        jPanel4.add(moIntHour);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMinute.setText("Minutos:");
        jlMinute.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlMinute);
        jPanel5.add(moIntMinute);

        jPanel3.add(jPanel5);

        jPanel1.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel jlHour;
    private javax.swing.JLabel jlMinute;
    private sa.lib.gui.bean.SBeanFieldInteger moIntHour;
    private sa.lib.gui.bean.SBeanFieldInteger moIntMinute;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 240, 150);
        
        moIntHour.setIntegerSettings(SGuiUtils.getLabelName(jlHour), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moIntMinute.setIntegerSettings(SGuiUtils.getLabelName(jlMinute), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moIntMinute.setMaxInteger(SDevManConsts.LABOR_DAY_MINUTES);
        
        moFields.addField(moIntHour);
        moFields.addField(moIntMinute);
        
        moFields.setFormButton(jbSave);
        
        jbSave.setText(SGuiConsts.TXT_BTN_OK);
    }
    
    /*
     * Private methods
     */
    
    /*
     * Public methods
     */
    
    public void setTime(double time) {
        moIntHour.setValue((int) time);
        moIntMinute.setValue((int) SLibUtils.round((time - moIntHour.getValue()) * SDevManConsts.HOUR_MINUTES, 0));
    }

    public double getTime() {
        return (double) moIntHour.getValue() + (double) moIntMinute.getValue() / SDevManConsts.HOUR_MINUTES;
    }

    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        return moFields.validateFields();
    }
    
    @Override
    public void resetForm() {
        moFields.resetFields();
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SDevManConsts.VALUE_TIME:
                setTime((Double) value);
                break;
            default:
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SDevManConsts.VALUE_TIME:
                value = getTime();
                break;
            default:
        }
        
        return value;
    }
}
