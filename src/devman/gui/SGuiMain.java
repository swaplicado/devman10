package devman.gui;

import devman.SDevManConsts;
import devman.mod.SModConsts;
import devman.mod.SModModuleCfg;
import devman.mod.SModModuleDev;
import devman.mod.SModModulePrj;
import devman.mod.SModSysConsts;
import devman.mod.SModUtils;
import devman.mod.cfg.db.SDbConfig;
import devman.mod.cfg.db.SDbUser;
import devman.mod.cfg.db.SDbUserGui;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.HashMap;
import java.util.TimeZone;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;
import sa.gui.util.SUtilConfigXml;
import sa.gui.util.SUtilConsts;
import sa.gui.util.SUtilLoginDlg;
import sa.gui.util.SUtilPasswordDlg;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbDatabase;
import sa.lib.db.SDbDatabaseMonitor;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridPaneView;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiDatePicker;
import sa.lib.gui.SGuiDateRangePicker;
import sa.lib.gui.SGuiField;
import sa.lib.gui.SGuiSession;
import sa.lib.gui.SGuiUserGui;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiYearMonthPicker;
import sa.lib.gui.SGuiYearPicker;
import sa.lib.gui.bean.SBeanDialogReport;
import sa.lib.gui.bean.SBeanForm;
import sa.lib.gui.bean.SBeanFormDialog;
import sa.lib.gui.bean.SBeanFormProcess;
import sa.lib.gui.bean.SBeanOptionPicker;
import sa.lib.img.SImgConsts;
import sa.lib.xml.SXmlUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sergio Flores
 */
public class SGuiMain extends JFrame implements SGuiClient, ActionListener {

    public static final String APP_NAME = "DevMan 1.0";
    public static final String APP_RELEASE = "DevMan 1.0 008.03";
    public static final String APP_COPYRIGHT = "Â© 2015 Software Aplicado SA de CV. Todos los derechos reservados.";
    public static final String APP_PROVIDER = "www.swaplicado.com.mx";
    
    private int mnTerminal;
    private boolean mbFirstActivation;
    private boolean mbLoggedIn;
    private SGuiSession moSession;
    private SUtilConfigXml moConfigXml;
    private SDbDatabase moSysDatabase;
    private SDbDatabaseMonitor moSysDatabaseMonitor;
    private Statement miSysStatement;
    private String msCompany;

    private SGuiDatePicker moDatePicker;
    private SGuiDateRangePicker moDateRangePicker;
    private SGuiYearPicker moYearPicker;
    private SGuiYearMonthPicker moYearMonthPicker;
    private SDlgMainSessionSettings moDlgMainSessionSettings;
    private SDlgGuiTime moDlgGuiTime;
    private JFileChooser moFileChooser;
    private ImageIcon moIcon;
    private ImageIcon moIconCloseActive;
    private ImageIcon moIconCloseInactive;
    private ImageIcon moIconCloseBright;
    private ImageIcon moIconCloseDark;
    
    /**
     * Creates new form SMainForm
     */
    public SGuiMain() {
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jPanelStatus = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jtfSystemDate = new javax.swing.JTextField();
        jtfWorkingDate = new javax.swing.JTextField();
        jbWorkingDate = new javax.swing.JButton();
        jtfCurrentProject = new javax.swing.JTextField();
        jtfCurrentProjectStage = new javax.swing.JTextField();
        jbSessionCustom = new javax.swing.JButton();
        jtfUser = new javax.swing.JTextField();
        jtfUserTs = new javax.swing.JTextField();
        jlAppRelease = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jlAppLogo = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiFileWorkingDate = new javax.swing.JMenuItem();
        jmiFileUserPassword = new javax.swing.JMenuItem();
        jsFile1 = new javax.swing.JPopupMenu.Separator();
        jmiFileCloseViewsAll = new javax.swing.JMenuItem();
        jmiFileCloseViewsOther = new javax.swing.JMenuItem();
        jsFile2 = new javax.swing.JPopupMenu.Separator();
        jmiFileCloseSession = new javax.swing.JMenuItem();
        jsFile3 = new javax.swing.JPopupMenu.Separator();
        jmiFileExit = new javax.swing.JMenuItem();
        jmCfg = new javax.swing.JMenu();
        jmiCfgUser = new javax.swing.JMenuItem();
        jmPrj = new javax.swing.JMenu();
        jmiPrjWork = new javax.swing.JMenuItem();
        jsPrj1 = new javax.swing.JPopupMenu.Separator();
        jmiPrjTask = new javax.swing.JMenuItem();
        jmPrjTaskStatus = new javax.swing.JMenu();
        jmiPrjTaskStatusPnd = new javax.swing.JMenuItem();
        jmiPrjTaskStatusPrc = new javax.swing.JMenuItem();
        jmiPrjTaskStatusFin = new javax.swing.JMenuItem();
        jmiPrjTaskStatusCan = new javax.swing.JMenuItem();
        jmiPrjTaskLog = new javax.swing.JMenuItem();
        jsPrj2 = new javax.swing.JPopupMenu.Separator();
        jmiPrjProject = new javax.swing.JMenuItem();
        jmiPrjDeliverable = new javax.swing.JMenuItem();
        jmiPrjStage = new javax.swing.JMenuItem();
        jmiPrjPhase = new javax.swing.JMenuItem();
        jmiPrjActivity = new javax.swing.JMenuItem();
        jmDev = new javax.swing.JMenu();
        jmiDevTrace = new javax.swing.JMenuItem();
        jmiDevTraceLog = new javax.swing.JMenuItem();
        jsDev1 = new javax.swing.JPopupMenu.Separator();
        jmiDevTestPlan = new javax.swing.JMenuItem();
        jmiDevTestPlanTest = new javax.swing.JMenuItem();
        jmiDevTestPlanTestLog = new javax.swing.JMenuItem();
        jsDev2 = new javax.swing.JPopupMenu.Separator();
        jmiDevRequirement = new javax.swing.JMenuItem();
        jmiDevElement = new javax.swing.JMenuItem();
        jmiDevComponent = new javax.swing.JMenuItem();
        jmiDevDocument = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiHelpHelp = new javax.swing.JMenuItem();
        jsHelp1 = new javax.swing.JPopupMenu.Separator();
        jmiHelpAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().add(jTabbedPane, java.awt.BorderLayout.CENTER);

        jPanelStatus.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(java.awt.Color.black);
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 2));

        jtfSystemDate.setEditable(false);
        jtfSystemDate.setForeground(java.awt.Color.white);
        jtfSystemDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfSystemDate.setText("00/00/0000");
        jtfSystemDate.setToolTipText("Fecha de sistema");
        jtfSystemDate.setFocusable(false);
        jtfSystemDate.setOpaque(false);
        jtfSystemDate.setPreferredSize(new java.awt.Dimension(65, 20));
        jPanel1.add(jtfSystemDate);

        jtfWorkingDate.setEditable(false);
        jtfWorkingDate.setForeground(java.awt.Color.white);
        jtfWorkingDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfWorkingDate.setText("00/00/0000");
        jtfWorkingDate.setToolTipText("Fecha de trabajo");
        jtfWorkingDate.setFocusable(false);
        jtfWorkingDate.setOpaque(false);
        jtfWorkingDate.setPreferredSize(new java.awt.Dimension(65, 20));
        jPanel1.add(jtfWorkingDate);

        jbWorkingDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/devman/gui/img/gui_date.gif"))); // NOI18N
        jbWorkingDate.setToolTipText("Cambiar fecha de trabajo");
        jbWorkingDate.setContentAreaFilled(false);
        jbWorkingDate.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.add(jbWorkingDate);

        jtfCurrentProject.setEditable(false);
        jtfCurrentProject.setForeground(java.awt.Color.white);
        jtfCurrentProject.setText("TEXT");
        jtfCurrentProject.setToolTipText("Proyecto actual");
        jtfCurrentProject.setFocusable(false);
        jtfCurrentProject.setOpaque(false);
        jtfCurrentProject.setPreferredSize(new java.awt.Dimension(50, 20));
        jPanel1.add(jtfCurrentProject);

        jtfCurrentProjectStage.setEditable(false);
        jtfCurrentProjectStage.setForeground(java.awt.Color.white);
        jtfCurrentProjectStage.setText("TEXT");
        jtfCurrentProjectStage.setToolTipText("Etapa actual");
        jtfCurrentProjectStage.setFocusable(false);
        jtfCurrentProjectStage.setOpaque(false);
        jtfCurrentProjectStage.setPreferredSize(new java.awt.Dimension(75, 20));
        jPanel1.add(jtfCurrentProjectStage);

        jbSessionCustom.setBackground(java.awt.Color.black);
        jbSessionCustom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/devman/gui/img/gui_session.gif"))); // NOI18N
        jbSessionCustom.setToolTipText("Cambiar preferencias");
        jbSessionCustom.setContentAreaFilled(false);
        jbSessionCustom.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel1.add(jbSessionCustom);

        jtfUser.setEditable(false);
        jtfUser.setForeground(java.awt.Color.white);
        jtfUser.setText("TEXT");
        jtfUser.setToolTipText("Usuario");
        jtfUser.setFocusable(false);
        jtfUser.setOpaque(false);
        jtfUser.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel1.add(jtfUser);

        jtfUserTs.setEditable(false);
        jtfUserTs.setForeground(java.awt.Color.white);
        jtfUserTs.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfUserTs.setText("00/00/0000 00.00.00 +0000");
        jtfUserTs.setToolTipText("Marca de tiempo de acceso");
        jtfUserTs.setFocusable(false);
        jtfUserTs.setOpaque(false);
        jtfUserTs.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel1.add(jtfUserTs);

        jlAppRelease.setForeground(new java.awt.Color(0, 153, 153));
        jlAppRelease.setText("RELEASE");
        jlAppRelease.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel1.add(jlAppRelease);

        jPanelStatus.add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setBackground(java.awt.Color.black);
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 2));

        jlAppLogo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlAppLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/devman/gui/img/swap_logo_9.jpg"))); // NOI18N
        jlAppLogo.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel2.add(jlAppLogo);

        jPanelStatus.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanelStatus, java.awt.BorderLayout.SOUTH);

        jmFile.setText("Archivo");

        jmiFileWorkingDate.setText("Cambiar fecha de trabajo...");
        jmFile.add(jmiFileWorkingDate);

        jmiFileUserPassword.setText("Cambiar contraseÃ±a...");
        jmFile.add(jmiFileUserPassword);
        jmFile.add(jsFile1);

        jmiFileCloseViewsAll.setText("Cerrar todas las vistas");
        jmFile.add(jmiFileCloseViewsAll);

        jmiFileCloseViewsOther.setText("Cerrar las otras vistas");
        jmFile.add(jmiFileCloseViewsOther);
        jmFile.add(jsFile2);

        jmiFileCloseSession.setText("Cerrar sesiÃ³n de usuario");
        jmFile.add(jmiFileCloseSession);
        jmFile.add(jsFile3);

        jmiFileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jmiFileExit.setText("Salir");
        jmFile.add(jmiFileExit);

        jMenuBar.add(jmFile);

        jmCfg.setText("ConfiguraciÃ³n");

        jmiCfgUser.setText("Usuarios");
        jmCfg.add(jmiCfgUser);

        jMenuBar.add(jmCfg);

        jmPrj.setText("Proyectos");

        jmiPrjWork.setText("Trabajo asignado");
        jmPrj.add(jmiPrjWork);
        jmPrj.add(jsPrj1);

        jmiPrjTask.setText("Tareas");
        jmPrj.add(jmiPrjTask);

        jmPrjTaskStatus.setText("Tareas por estatus");

        jmiPrjTaskStatusPnd.setText("Tareas pendientes");
        jmPrjTaskStatus.add(jmiPrjTaskStatusPnd);

        jmiPrjTaskStatusPrc.setText("Tareas en proceso");
        jmPrjTaskStatus.add(jmiPrjTaskStatusPrc);

        jmiPrjTaskStatusFin.setText("Tareas terminadas");
        jmPrjTaskStatus.add(jmiPrjTaskStatusFin);

        jmiPrjTaskStatusCan.setText("Tareas canceladas");
        jmPrjTaskStatus.add(jmiPrjTaskStatusCan);

        jmPrj.add(jmPrjTaskStatus);

        jmiPrjTaskLog.setText("BitÃ¡cora de tareas");
        jmPrj.add(jmiPrjTaskLog);
        jmPrj.add(jsPrj2);

        jmiPrjProject.setText("Proyectos");
        jmPrj.add(jmiPrjProject);

        jmiPrjDeliverable.setText("Entregables");
        jmPrj.add(jmiPrjDeliverable);

        jmiPrjStage.setText("Etapas");
        jmPrj.add(jmiPrjStage);

        jmiPrjPhase.setText("Fases");
        jmPrj.add(jmiPrjPhase);

        jmiPrjActivity.setText("Actividades");
        jmPrj.add(jmiPrjActivity);

        jMenuBar.add(jmPrj);

        jmDev.setText("Desarrollo");

        jmiDevTrace.setText("Registro de rastreo");
        jmDev.add(jmiDevTrace);

        jmiDevTraceLog.setText("BitÃ¡cora de registro de rastreo");
        jmDev.add(jmiDevTraceLog);
        jmDev.add(jsDev1);

        jmiDevTestPlan.setText("Planes de pruebas");
        jmDev.add(jmiDevTestPlan);

        jmiDevTestPlanTest.setText("Pruebas");
        jmDev.add(jmiDevTestPlanTest);

        jmiDevTestPlanTestLog.setText("BitÃ¡cora de pruebas");
        jmDev.add(jmiDevTestPlanTestLog);
        jmDev.add(jsDev2);

        jmiDevRequirement.setText("Requerimientos");
        jmDev.add(jmiDevRequirement);

        jmiDevElement.setText("Elementos de A&D");
        jmDev.add(jmiDevElement);

        jmiDevComponent.setText("Componentes");
        jmDev.add(jmiDevComponent);

        jmiDevDocument.setText("Documentos");
        jmDev.add(jmiDevDocument);

        jMenuBar.add(jmDev);

        jmHelp.setText("Ayuda");

        jmiHelpHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmiHelpHelp.setText("Ayuda");
        jmiHelpHelp.setEnabled(false);
        jmHelp.add(jmiHelpHelp);
        jmHelp.add(jsHelp1);

        jmiHelpAbout.setText("Acerca de...");
        jmHelp.add(jmiHelpAbout);

        jMenuBar.add(jmHelp);

        setJMenuBar(jMenuBar);

        setBounds(0, 0, 1016, 639);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        windowClosing();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        boolean lookAndfeelSet = false;
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc="Look and feel setting code (optional)">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            /*
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                System.out.println(info.getName());
            }
            
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                //if ("Metal".equals(info.getName())) {
                if ("Nimbus".equals(info.getName())) {
                //if ("CDE/Motif".equals(info.getName())) {
                //if ("Windows".equals(info.getName())) {
                //if ("Windows Classic".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    lookAndfeelSet = true;
                    break;
                }
            }
            */
            if (!lookAndfeelSet) {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SGuiMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SGuiMain().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelStatus;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton jbSessionCustom;
    private javax.swing.JButton jbWorkingDate;
    private javax.swing.JLabel jlAppLogo;
    private javax.swing.JLabel jlAppRelease;
    private javax.swing.JMenu jmCfg;
    private javax.swing.JMenu jmDev;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmPrj;
    private javax.swing.JMenu jmPrjTaskStatus;
    private javax.swing.JMenuItem jmiCfgUser;
    private javax.swing.JMenuItem jmiDevComponent;
    private javax.swing.JMenuItem jmiDevDocument;
    private javax.swing.JMenuItem jmiDevElement;
    private javax.swing.JMenuItem jmiDevRequirement;
    private javax.swing.JMenuItem jmiDevTestPlan;
    private javax.swing.JMenuItem jmiDevTestPlanTest;
    private javax.swing.JMenuItem jmiDevTestPlanTestLog;
    private javax.swing.JMenuItem jmiDevTrace;
    private javax.swing.JMenuItem jmiDevTraceLog;
    private javax.swing.JMenuItem jmiFileCloseSession;
    private javax.swing.JMenuItem jmiFileCloseViewsAll;
    private javax.swing.JMenuItem jmiFileCloseViewsOther;
    private javax.swing.JMenuItem jmiFileExit;
    private javax.swing.JMenuItem jmiFileUserPassword;
    private javax.swing.JMenuItem jmiFileWorkingDate;
    private javax.swing.JMenuItem jmiHelpAbout;
    private javax.swing.JMenuItem jmiHelpHelp;
    private javax.swing.JMenuItem jmiPrjActivity;
    private javax.swing.JMenuItem jmiPrjDeliverable;
    private javax.swing.JMenuItem jmiPrjPhase;
    private javax.swing.JMenuItem jmiPrjProject;
    private javax.swing.JMenuItem jmiPrjStage;
    private javax.swing.JMenuItem jmiPrjTask;
    private javax.swing.JMenuItem jmiPrjTaskLog;
    private javax.swing.JMenuItem jmiPrjTaskStatusCan;
    private javax.swing.JMenuItem jmiPrjTaskStatusFin;
    private javax.swing.JMenuItem jmiPrjTaskStatusPnd;
    private javax.swing.JMenuItem jmiPrjTaskStatusPrc;
    private javax.swing.JMenuItem jmiPrjWork;
    private javax.swing.JPopupMenu.Separator jsDev1;
    private javax.swing.JPopupMenu.Separator jsDev2;
    private javax.swing.JPopupMenu.Separator jsFile1;
    private javax.swing.JPopupMenu.Separator jsFile2;
    private javax.swing.JPopupMenu.Separator jsFile3;
    private javax.swing.JPopupMenu.Separator jsHelp1;
    private javax.swing.JPopupMenu.Separator jsPrj1;
    private javax.swing.JPopupMenu.Separator jsPrj2;
    private javax.swing.JTextField jtfCurrentProject;
    private javax.swing.JTextField jtfCurrentProjectStage;
    private javax.swing.JTextField jtfSystemDate;
    private javax.swing.JTextField jtfUser;
    private javax.swing.JTextField jtfUserTs;
    private javax.swing.JTextField jtfWorkingDate;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        int result = SLibConsts.UNDEFINED;
        String xml = "";
        TimeZone zone = null;

        mbFirstActivation = true;

        setExtendedState(Frame.MAXIMIZED_BOTH);

        SBeanForm.OwnerFrame = this;
        SBeanFormDialog.OwnerFrame = this;
        SBeanFormProcess.OwnerFrame = this;
        SBeanOptionPicker.OwnerFrame = this;
        SBeanDialogReport.OwnerFrame = this;

        logout();

        try {
            xml = SXmlUtils.readXml(SUtilConsts.FILE_NAME_CFG);
            moConfigXml = new SUtilConfigXml();
            moConfigXml.processXml(xml);

            zone = SLibUtils.createTimeZone(TimeZone.getDefault(), TimeZone.getTimeZone((String) moConfigXml.getAttribute(SUtilConfigXml.ATT_TIME_ZONE).getValue()));
            SLibUtils.restoreDateFormats(zone);
            TimeZone.setDefault(zone);

            moSysDatabase = new SDbDatabase(SDbConsts.DBMS_MYSQL);
            result = moSysDatabase.connect(
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_DB_HOST).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_DB_PORT).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_DB_NAME).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_USR_NAME).getValue(),
                    (String) moConfigXml.getAttribute(SUtilConfigXml.ATT_USR_PSWD).getValue());

            if (result != SDbConsts.CONNECTION_OK) {
                throw new Exception(SDbConsts.ERR_MSG_DB_CONNECTION);
            }
            else {
                moSysDatabaseMonitor = new SDbDatabaseMonitor(moSysDatabase);
                moSysDatabaseMonitor.startThread();

                miSysStatement = moSysDatabase.getConnection().createStatement();
            }

            mnTerminal = SLibUtils.parseInt((String) moConfigXml.getAttribute(SUtilConfigXml.ATT_TERMINAL).getValue());

            moDatePicker = new SGuiDatePicker(this, SGuiConsts.DATE_PICKER_DATE);
            moDateRangePicker = new SGuiDateRangePicker(this);
            moYearPicker = new SGuiYearPicker(this);
            moYearMonthPicker = new SGuiYearMonthPicker(this);
            moFileChooser = new JFileChooser();
            moIcon = new ImageIcon(getClass().getResource("/devman/gui/img/swap_icon.png"));
            moIconCloseActive = new ImageIcon(getClass().getResource("/sa/lib/img/gui_close.png"));
            moIconCloseInactive = new ImageIcon(getClass().getResource("/sa/lib/img/gui_close_ina.png"));
            moIconCloseBright = new ImageIcon(getClass().getResource("/sa/lib/img/gui_close_bri.png"));
            moIconCloseDark = new ImageIcon(getClass().getResource("/sa/lib/img/gui_close_dar.png"));

            setIconImage(moIcon.getImage());
            jlAppRelease.setText(APP_RELEASE);
            jlAppLogo.setToolTipText(APP_COPYRIGHT);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
            actionFileExit();
        }

        jbWorkingDate.addActionListener(this);
        jbSessionCustom.addActionListener(this);

        jmiFileWorkingDate.addActionListener(this);
        jmiFileUserPassword.addActionListener(this);
        jmiFileCloseViewsAll.addActionListener(this);
        jmiFileCloseViewsOther.addActionListener(this);
        jmiFileCloseSession.addActionListener(this);
        jmiFileExit.addActionListener(this);
        
        jmiCfgUser.addActionListener(this);
        
        jmiPrjWork.addActionListener(this);
        jmiPrjTask.addActionListener(this);
        jmiPrjTaskLog.addActionListener(this);
        jmiPrjTaskStatusPnd.addActionListener(this);
        jmiPrjTaskStatusPrc.addActionListener(this);
        jmiPrjTaskStatusFin.addActionListener(this);
        jmiPrjTaskStatusCan.addActionListener(this);
        jmiPrjProject.addActionListener(this);
        jmiPrjDeliverable.addActionListener(this);
        jmiPrjStage.addActionListener(this);
        jmiPrjPhase.addActionListener(this);
        jmiPrjActivity.addActionListener(this);
        
        jmiDevTrace.addActionListener(this);
        jmiDevTraceLog.addActionListener(this);
        jmiDevTestPlan.addActionListener(this);
        jmiDevTestPlanTest.addActionListener(this);
        jmiDevTestPlanTestLog.addActionListener(this);
        jmiDevRequirement.addActionListener(this);
        jmiDevElement.addActionListener(this);
        jmiDevComponent.addActionListener(this);
        jmiDevDocument.addActionListener(this);
        
        jmiHelpHelp.addActionListener(this);
        jmiHelpAbout.addActionListener(this);
    }

    private void windowActivated() {
        if (mbFirstActivation){
            mbFirstActivation = false;
            login();
        }
    }

    private void windowClosing() {
        if (mbLoggedIn) {
            logout();
        }
    }

    private void renderMenues(JMenu[] menues) {
        
    }

    private void renderClientSession(SGuiMainSessionCustom mainSessionCustom) {
        int[] projectStageKey = null;
            
        jtfCurrentProject.setText("");
        jtfCurrentProjectStage.setText("");
        
        if (mainSessionCustom != null) {
            projectStageKey = ((SGuiMainSessionCustom) moSession.getSessionCustom()).getProjectStageKey();
            
            if (projectStageKey[0] != SLibConsts.UNDEFINED) {
                jtfCurrentProject.setText((String) moSession.readField(SModConsts.PU_PRJ, projectStageKey, SDbRegistry.FIELD_CODE));
                jtfCurrentProject.setCaretPosition(0);
            }
            
            if (projectStageKey[0] != SLibConsts.UNDEFINED && projectStageKey[1] != SLibConsts.UNDEFINED) {
                jtfCurrentProjectStage.setText((String) moSession.readField(SModConsts.PU_PRJ_STG, projectStageKey, SDbRegistry.FIELD_CODE));
                jtfCurrentProjectStage.setCaretPosition(0);
            }
        }
    }

    private void logout() {
        renderMenues(null);
        actionFileCloseViewAll();

        mbLoggedIn = false;
        moSession = null;

        msCompany = "";
        setTitle(APP_NAME);

        jtfUserTs.setText("");
        jtfSystemDate.setText("");
        jtfUser.setText("");
        jtfWorkingDate.setText("");
        renderClientSession(null);

        jmFile.setEnabled(false);
        jmCfg.setEnabled(false);
        jmPrj.setEnabled(false);
        jmDev.setEnabled(false);
        jmHelp.setEnabled(false);
        jmiCfgUser.setEnabled(false);
        jmiFileWorkingDate.setEnabled(false);
        jbWorkingDate.setEnabled(false);
        jbSessionCustom.setEnabled(false);
    }

    private void login() {
        String sql = "";
        ResultSet resultSet = null;
        Date date = null;
        SDbUser user = null;
        SDbConfig config = null;
        SUtilLoginDlg loginDlg = new SUtilLoginDlg(this, "id_com", "com", false);

        loginDlg.setVisible(true);

        if (loginDlg.getFormResult() != SGuiConsts.FORM_RESULT_OK) {
            actionFileExit();
        }
        else {
            try {
                SGuiUtils.setCursorWait(this);

                // Get system date:

                sql = "SELECT NOW() ";
                resultSet = miSysStatement.executeQuery(sql);
                if (!resultSet.next()) {
                    throw new Exception (SUtilConsts.ERR_MSG_SYS_DATE);
                }
                else {
                    date = resultSet.getTimestamp(1);
                }

                mbLoggedIn = true;
                moSession = new SGuiSession(this);
                moSession.setSystemDate(date);
                moSession.setCurrentDate(date);
                moSession.setUserTs(date);
                moSession.setDatabase(loginDlg.getDatabase());
                
                sql = "SET GLOBAL max_allowed_packet = 1024 * 1024 * 16 ";  // 16 MB
                moSession.getStatement().execute(sql);

                user = new SDbUser();
                user.read(moSession, loginDlg.getUserKey());

                config = new SDbConfig();
                config.read(moSession, new int[] { SModSysConsts.C_CFG_CFG });

                moSession.setConfigSystem(config);
                moSession.setConfigCompany(null);
                moSession.setConfigBranch(null);
                moSession.setUser(user);
                moSession.setModuleUtils(new SModUtils());
                moSession.getModules().add(new SModModuleCfg(this));
                moSession.getModules().add(new SModModulePrj(this));
                moSession.getModules().add(new SModModuleDev(this));

                //user.computeAccess(moSession);    // not implemented yet!
                moSession.setSessionCustom(user.createSessionCustom(this, mnTerminal));

                msCompany = loginDlg.getCompany();
                setTitle(APP_NAME + " - " + msCompany);

                jtfSystemDate.setText(SLibUtils.DateFormatDate.format(moSession.getSystemDate()));
                jtfWorkingDate.setText(SLibUtils.DateFormatDate.format(moSession.getCurrentDate()));
                jtfUser.setText(user.getName());
                jtfUserTs.setText(SLibUtils.DateFormatDatetimeTimeZone.format(moSession.getUserTs()));

                jmFile.setEnabled(true);
                jmCfg.setEnabled(user.isAdministrator());
                jmPrj.setEnabled(true);
                jmDev.setEnabled(true);
                jmHelp.setEnabled(true);
                jmiCfgUser.setEnabled(user.isSupervisor());
                jmiFileWorkingDate.setEnabled(user.isAdministrator());
                jbWorkingDate.setEnabled(jmiFileWorkingDate.isEnabled());
                jbSessionCustom.setEnabled(true);

                //renderClientSession((SGuiMainSessionCustom) moSession.getSessionCustom());
                if (!user.isSupervisor()) {
                    moSession.showView(SModConsts.PX_WRK, SLibConsts.UNDEFINED, null);
                    moSession.showView(SModConsts.P_TSK, SModSysConsts.CS_ST_PND, null);
                    moSession.showView(SModConsts.P_TSK, SModSysConsts.CS_ST_PRC, null);
                    jTabbedPane.setSelectedIndex(0);
                }

                SGuiUtils.setCursorDefault(this);
            }
            catch(SQLException e) {
                SGuiUtils.setCursorDefault(this);
                SLibUtils.showException(this, e);
                actionFileExit();
            }
            catch(Exception e) {
                SGuiUtils.setCursorDefault(this);
                SLibUtils.showException(this, e);
                actionFileExit();
            }
        }
    }

    public void actionToggleViewModule(int type, int subtype) {
        renderMenues(moSession.getModule(type, subtype).getMenus());
    }

    public void actionFileWorkingDate() {
        moDatePicker.resetPicker();
        moDatePicker.setOption(moSession.getCurrentDate());
        moDatePicker.setVisible(true);

        if (moDatePicker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            moSession.setCurrentDate(moDatePicker.getOption());
            jtfWorkingDate.setText(SLibUtils.DateFormatDate.format(moSession.getCurrentDate()));
        }
    }

    public void actionFileUserPassword() {
        new SUtilPasswordDlg(this).setVisible(true);
    }

    public void actionFileCloseViewAll() {
        try {
            SGuiUtils.setCursorWait(this);

            for (int i = 0; i < jTabbedPane.getTabCount(); i++) {
                ((SGridPaneView) jTabbedPane.getComponentAt(i)).paneViewClosed();
            }

            jTabbedPane.removeAll();
        }
        catch(Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            SGuiUtils.setCursorDefault(this);
        }
    }

    public void actionFileCloseViewOther() {
        int i = 0;
        int index = jTabbedPane.getSelectedIndex();

        try {
            SGuiUtils.setCursorWait(this);

            for (i = jTabbedPane.getTabCount() - 1; i > index; i--) {
                ((SGridPaneView) jTabbedPane.getComponentAt(i)).paneViewClosed();  // this preserves view user settings
                jTabbedPane.removeTabAt(i);
            }

            for (i = 0; i < index; i++) {
                ((SGridPaneView) jTabbedPane.getComponentAt(0)).paneViewClosed();  // this preserves view user settings
                jTabbedPane.removeTabAt(0);
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            SGuiUtils.setCursorDefault(this);
        }
    }

    public void actionFileCloseSession() {
        logout();
        login();
    }

    private void actionFileExit() {
        logout();
        System.exit(0);
    }

    public void actionHelpHelp() {

    }

    public void actionHelpAbout() {
        new SDlgHelpAbout(this).setVisible(true);
    }
    
    public void actionSessionCustom() {
        if (moDlgMainSessionSettings == null) {
            moDlgMainSessionSettings = new SDlgMainSessionSettings(this, "Preferencias de la sesiÃ³n");
        }
        
        moDlgMainSessionSettings.setMainSessionCustom((SGuiMainSessionCustom) moSession.getSessionCustom());
        moDlgMainSessionSettings.setVisible(true);
        
        if (moDlgMainSessionSettings.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
            moSession.setSessionCustom(moDlgMainSessionSettings.getMainSessionCustom());
            renderClientSession((SGuiMainSessionCustom) moSession.getSessionCustom());
        }
    }
    
    public void computeTime(SGuiField field) {
        if (moDlgGuiTime == null) {
            moDlgGuiTime = new SDlgGuiTime(this, SDevManConsts.COMP_TIME);
        }
        
        moDlgGuiTime.resetForm();
        moDlgGuiTime.setTime((double) field.getValue());
        moDlgGuiTime.setVisible(true);

        if (moDlgGuiTime.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
            field.setValue(moDlgGuiTime.getTime());
            field.getComponent().requestFocus();
        }
    }

    @Override
    public JFrame getFrame() {
        return this;
    }

    @Override
    public JTabbedPane getTabbedPane() {
        return jTabbedPane;
    }

    @Override
    public SGuiSession getSession() {
        return moSession;
    }

    @Override
    public SDbDatabase getSysDatabase() {
        return moSysDatabase;
    }

    @Override
    public Statement getSysStatement() {
        return miSysStatement;
    }

    @Override
    public SGuiDatePicker getDatePicker() {
        return moDatePicker;
    }

    @Override
    public SGuiDateRangePicker getDateRangePicker() {
        return moDateRangePicker;
    }

    @Override
    public SGuiYearPicker getYearPicker() {
        return moYearPicker;
    }

    @Override
    public SGuiYearMonthPicker getYearMonthPicker() {
        return moYearMonthPicker;
    }

    @Override
    public JFileChooser getFileChooser() {
        return moFileChooser;
    }

    @Override
    public ImageIcon getImageIcon(int icon) {
        ImageIcon imageIcon = null;

        switch(icon) {
            case SImgConsts.ICO_GUI_CLOSE:
                imageIcon = moIconCloseActive;
                break;
            case SImgConsts.ICO_GUI_CLOSE_INA:
                imageIcon = moIconCloseInactive;
                break;
            case SImgConsts.ICO_GUI_CLOSE_BRI:
                imageIcon = moIconCloseBright;
                break;
            case SImgConsts.ICO_GUI_CLOSE_DAR:
                imageIcon = moIconCloseDark;
                break;
            default:
                showMsgBoxError(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }

        return imageIcon;
    }

    @Override
    public SGuiUserGui readUserGui(int[] key) {
        SDbUserGui userGui = new SDbUserGui();

        try {
            userGui.read(moSession, key);
        }
        catch (SQLException e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }
        catch (Exception e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }

        return userGui;
    }

    @Override
    public SGuiUserGui saveUserGui(int[] key, String gui) {
        SDbUserGui userGui = (SDbUserGui) readUserGui(key);

        if (userGui == null) {
            userGui = new SDbUserGui();
            userGui.setPrimaryKey(key);
        }

        try {
            userGui.setGui(gui);
            userGui.save(moSession);
        }
        catch (SQLException e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }
        catch (Exception e) {
            userGui = null;
            SLibUtils.printException(this, e);
        }

        return userGui;
    }

    @Override
    public HashMap<String, Object> createReportParams() {
        HashMap<String, Object> params = new HashMap<String, Object>();

        params.put("sAppName", APP_NAME);
        params.put("sAppCopyright", APP_COPYRIGHT);
        params.put("sAppProvider", APP_PROVIDER);
        params.put("sCompany", msCompany);
        params.put("sUser", moSession.getUser().getName());
        params.put("oFormatDate", SLibUtils.DateFormatDate);
        params.put("oFormatDatetime", SLibUtils.DateFormatDatetime);

        return params;
    }

    @Override
    public String getTableCompany() {
        return SModConsts.TablesMap.get(SModConsts.SU_COM);
    }

    @Override
    public String getTableUser() {
        return SModConsts.TablesMap.get(SModConsts.CU_USR);
    }

    @Override
    public String getAppName() {
        return APP_NAME;
    }

    @Override
    public String getAppRelease() {
        return APP_RELEASE;
    }

    @Override
    public String getAppCopyright() {
        return APP_COPYRIGHT;
    }

    @Override
    public String getAppProvider() {
        return APP_PROVIDER;
    }

    @Override
    public void showMsgBoxError(String msg) {
        JOptionPane.showMessageDialog(this, msg, SGuiConsts.MSG_BOX_ERROR, JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void showMsgBoxWarning(String msg) {
        JOptionPane.showMessageDialog(this, msg, SGuiConsts.MSG_BOX_WARNING, JOptionPane.WARNING_MESSAGE);
    }

    @Override
    public void showMsgBoxInformation(String msg) {
        JOptionPane.showMessageDialog(this, msg, SGuiConsts.MSG_BOX_INFORMATION, JOptionPane.INFORMATION_MESSAGE);
    }

    @Override
    public int showMsgBoxConfirm(String msg) {
        return JOptionPane.showConfirmDialog(this, msg, SGuiConsts.MSG_BOX_CONFIRM, JOptionPane.YES_NO_OPTION);
    }

    @Override
    public void finalize() throws Throwable {
        super.finalize();

        if (moSysDatabaseMonitor != null && moSysDatabaseMonitor.isAlive()) {
            moSysDatabaseMonitor.stopThread();
        }

        System.out.println(this.getClass().getName() + ".finalize() called!");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbWorkingDate) {
                actionFileWorkingDate();
            }
            else if (button == jbSessionCustom) {
                actionSessionCustom();
            }
        }
        else if (e.getSource() instanceof JMenuItem) {
            JMenuItem menuItem = (JMenuItem) e.getSource();

            if (menuItem == jmiFileWorkingDate) {
                actionFileWorkingDate();
            }
            else if (menuItem == jmiFileUserPassword) {
                actionFileUserPassword();
            }
            else if (menuItem == jmiFileCloseViewsAll) {
                actionFileCloseViewAll();
            }
            else if (menuItem == jmiFileCloseViewsOther) {
                actionFileCloseViewOther();
            }
            else if (menuItem == jmiFileCloseSession) {
                actionFileCloseSession();
            }
            else if (menuItem == jmiFileExit) {
                actionFileExit();
            }
            else if (menuItem == jmiCfgUser) {
                moSession.showView(SModConsts.CU_USR, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjWork) {
                moSession.showView(SModConsts.PX_WRK, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjTask) {
                moSession.showView(SModConsts.P_TSK, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjTaskStatusPnd) {
                moSession.showView(SModConsts.P_TSK, SModSysConsts.CS_ST_PND, null);
            }
            else if (menuItem == jmiPrjTaskStatusPrc) {
                moSession.showView(SModConsts.P_TSK, SModSysConsts.CS_ST_PRC, null);
            }
            else if (menuItem == jmiPrjTaskStatusFin) {
                moSession.showView(SModConsts.P_TSK, SModSysConsts.CS_ST_FIN, null);
            }
            else if (menuItem == jmiPrjTaskStatusCan) {
                moSession.showView(SModConsts.P_TSK, SModSysConsts.CS_ST_CAN, null);
            }
            else if (menuItem == jmiPrjTaskLog) {
                moSession.showView(SModConsts.P_TSK_LOG, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjProject) {
                moSession.showView(SModConsts.PU_PRJ, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjDeliverable) {
                moSession.showView(SModConsts.PU_PRJ_DLV, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjStage) {
                moSession.showView(SModConsts.PU_PRJ_STG, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjPhase) {
                moSession.showView(SModConsts.PU_PRJ_STG_PHS, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiPrjActivity) {
                moSession.showView(SModConsts.PU_PRJ_STG_PHS_ACT, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevTrace) {
                moSession.showView(SModConsts.D_TRC, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevTraceLog) {
                moSession.showView(SModConsts.D_TRC_LOG, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevTestPlan) {
                moSession.showView(SModConsts.D_TST_PLN, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevTestPlanTest) {
                moSession.showView(SModConsts.D_TST_PLN_TST, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevTestPlanTestLog) {
                moSession.showView(SModConsts.D_TST_PLN_TST_LOG, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevRequirement) {
                moSession.showView(SModConsts.DU_REQ, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevElement) {
                moSession.showView(SModConsts.DU_ADE, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevComponent) {
                moSession.showView(SModConsts.DU_CMP, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiDevDocument) {
                moSession.showView(SModConsts.DU_DOC, SLibConsts.UNDEFINED, null);
            }
            else if (menuItem == jmiHelpHelp) {
                actionHelpHelp();
            }
            else if (menuItem == jmiHelpAbout) {
                actionHelpAbout();
            }
        }
    }

    @Override
    public void computeSessionSettings() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void preserveSessionSettings() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
