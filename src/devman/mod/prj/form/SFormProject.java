/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package devman.mod.prj.form;

import devman.SDevManConsts;
import devman.gui.SGuiMain;
import devman.mod.SModConsts;
import devman.mod.SModSysConsts;
import devman.mod.prj.db.SDbProject;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormProject extends SBeanForm implements ActionListener, ItemListener {
    
    private SDbProject moRegistry;

    /**
     * Creates new form SFormProject
     */
    public SFormProject(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.PU_PRJ, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlType = new javax.swing.JLabel();
        moKeyType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlStatus = new javax.swing.JLabel();
        moKeyStatus = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jlDateStartPlanned = new javax.swing.JLabel();
        moDateStartPlanned = new sa.lib.gui.bean.SBeanFieldDate();
        jlDummy1 = new javax.swing.JLabel();
        jlDateStartReal = new javax.swing.JLabel();
        moDateStartReal = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlDateEndPlanned = new javax.swing.JLabel();
        moDateEndPlanned = new sa.lib.gui.bean.SBeanFieldDate();
        jlDummy2 = new javax.swing.JLabel();
        jlDateEndReal = new javax.swing.JLabel();
        moDateEndReal = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel7 = new javax.swing.JPanel();
        jlTimePlanned = new javax.swing.JLabel();
        moCompTimePlanned = new sa.lib.gui.bean.SBeanCompoundField();
        jbComputeTime = new javax.swing.JButton();
        jlTimeReal = new javax.swing.JLabel();
        moCompTimeReal = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel14 = new javax.swing.JPanel();
        jlUser = new javax.swing.JLabel();
        moKeyUser = new sa.lib.gui.bean.SBeanFieldKey();
        jbSetUser = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlType.setText("Tipo:*");
        jlType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlType);

        moKeyType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moKeyType);

        jPanel2.add(jPanel9);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("CÃ³digo:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCode);
        jPanel3.add(moTextCode);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel4.add(moTextName);

        jPanel2.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatus.setText("Estatus:*");
        jlStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlStatus);

        moKeyStatus.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(moKeyStatus);

        jPanel2.add(jPanel8);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStartPlanned.setText("Inicio planeado:*");
        jlDateStartPlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateStartPlanned);

        moDateStartPlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(moDateStartPlanned);

        jlDummy1.setPreferredSize(new java.awt.Dimension(63, 23));
        jPanel5.add(jlDummy1);

        jlDateStartReal.setText("Inicio real:*");
        jlDateStartReal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jlDateStartReal);

        moDateStartReal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(moDateStartReal);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEndPlanned.setText("Fin planeado:*");
        jlDateEndPlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDateEndPlanned);

        moDateEndPlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(moDateEndPlanned);

        jlDummy2.setPreferredSize(new java.awt.Dimension(63, 23));
        jPanel6.add(jlDummy2);

        jlDateEndReal.setText("Fin real:");
        jlDateEndReal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlDateEndReal);

        moDateEndReal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(moDateEndReal);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTimePlanned.setText("Tiempo planeado:*");
        jlTimePlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlTimePlanned);
        jPanel7.add(moCompTimePlanned);

        jbComputeTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/devman/gui/img/icon_std_wizard.gif"))); // NOI18N
        jbComputeTime.setToolTipText("Capturar tiempo");
        jbComputeTime.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbComputeTime);

        jlTimeReal.setText("Tiempo real:");
        jlTimeReal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlTimeReal);
        jPanel7.add(moCompTimeReal);

        jPanel2.add(jPanel7);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUser.setText("Responsable:*");
        jlUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlUser);

        moKeyUser.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(moKeyUser);

        jbSetUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_copy.gif"))); // NOI18N
        jbSetUser.setToolTipText("Fijar responsable");
        jbSetUser.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbSetUser);

        jPanel2.add(jPanel14);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbComputeTime;
    private javax.swing.JButton jbSetUser;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlDateEndPlanned;
    private javax.swing.JLabel jlDateEndReal;
    private javax.swing.JLabel jlDateStartPlanned;
    private javax.swing.JLabel jlDateStartReal;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlStatus;
    private javax.swing.JLabel jlTimePlanned;
    private javax.swing.JLabel jlTimeReal;
    private javax.swing.JLabel jlType;
    private javax.swing.JLabel jlUser;
    private sa.lib.gui.bean.SBeanCompoundField moCompTimePlanned;
    private sa.lib.gui.bean.SBeanCompoundField moCompTimeReal;
    private sa.lib.gui.bean.SBeanFieldDate moDateEndPlanned;
    private sa.lib.gui.bean.SBeanFieldDate moDateEndReal;
    private sa.lib.gui.bean.SBeanFieldDate moDateStartPlanned;
    private sa.lib.gui.bean.SBeanFieldDate moDateStartReal;
    private sa.lib.gui.bean.SBeanFieldKey moKeyStatus;
    private sa.lib.gui.bean.SBeanFieldKey moKeyType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUser;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);
        
        moKeyType.setKeySettings(miClient, SGuiUtils.getLabelName(jlType), true);
        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlCode), 10);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 50);
        moKeyStatus.setKeySettings(miClient, SGuiUtils.getLabelName(jlStatus), true);
        moDateStartPlanned.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStartPlanned), true);
        moDateStartReal.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStartReal), true);
        moDateEndPlanned.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEndPlanned), true);
        moDateEndReal.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEndReal), false);
        moCompTimePlanned.setCompoundFieldSettings(miClient);
        moCompTimePlanned.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTimePlanned), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompTimeReal.setCompoundFieldSettings(miClient);
        moCompTimeReal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTimeReal), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyUser.setKeySettings(miClient, SGuiUtils.getLabelName(jlUser), true);
        
        moFields.addField(moKeyType);
        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moKeyStatus);
        moFields.addField(moDateStartPlanned);
        moFields.addField(moDateStartReal);
        moFields.addField(moDateEndPlanned);
        moFields.addField(moDateEndReal);
        moFields.addField(moCompTimePlanned.getField());
        moFields.addField(moCompTimeReal.getField());
        moFields.addField(moKeyUser);
        
        moFields.setFormButton(jbSave);
        
        moCompTimePlanned.setCompoundText(SDevManConsts.MAN_HRS);
        moCompTimeReal.setCompoundText(SDevManConsts.MAN_HRS);
    }
    
    private void setFieldsStatusByStatus() {
        if (moKeyStatus.getSelectedIndex() <= 0) {
            moDateStartPlanned.setEditable(false);
            moDateStartReal.setEditable(false);
            moDateEndPlanned.setEditable(false);
            moDateEndReal.setEditable(false);
            moCompTimePlanned.getField().setEditable(false);
            moCompTimeReal.getField().setEditable(false);
            jbComputeTime.setEnabled(false);
            
            moDateStartReal.setValue(null);
            moDateEndReal.setValue(null);
        }
        else {
            switch (moKeyStatus.getValue()[0]) {
                case SModSysConsts.CS_ST_PND:
                    moDateStartPlanned.setEditable(true);
                    moDateStartReal.setEditable(false);
                    moDateEndPlanned.setEditable(true);
                    moDateEndReal.setEditable(false);
                    moCompTimePlanned.getField().setEditable(true);
                    moCompTimeReal.getField().setEditable(false);
                    jbComputeTime.setEnabled(true);
                    
                    moDateStartReal.setValue(null);
                    moDateEndReal.setValue(null);
                    break;
                    
                case SModSysConsts.CS_ST_PRC:
                    moDateStartPlanned.setEditable(false);
                    moDateStartReal.setEditable(true);
                    moDateEndPlanned.setEditable(false);
                    moDateEndReal.setEditable(true);
                    moCompTimePlanned.getField().setEditable(false);
                    moCompTimeReal.getField().setEditable(false);
                    jbComputeTime.setEnabled(false);
                    break;
                    
                case SModSysConsts.CS_ST_FIN:
                    moDateStartPlanned.setEditable(false);
                    moDateStartReal.setEditable(false);
                    moDateEndPlanned.setEditable(false);
                    moDateEndReal.setEditable(false);
                    moCompTimePlanned.getField().setEditable(false);
                    moCompTimeReal.getField().setEditable(false);
                    jbComputeTime.setEnabled(false);
                    break;
                    
                case SModSysConsts.CS_ST_CAN:
                    moDateStartPlanned.setEditable(false);
                    moDateStartReal.setEditable(false);
                    moDateEndPlanned.setEditable(false);
                    moDateEndReal.setEditable(false);
                    moCompTimePlanned.getField().setEditable(false);
                    moCompTimeReal.getField().setEditable(false);
                    jbComputeTime.setEnabled(false);
                    
                    moDateStartReal.setValue(null);
                    moDateEndReal.setValue(null);
                    break;
                    
                default:
            }
        }
    }
    
    private void actionComputeTime() {
        ((SGuiMain) miClient).computeTime(moCompTimePlanned.getField());
    }
    
    private void actionSetUser() {
        moKeyUser.setValue(new int[] { miClient.getSession().getUser().getPkUserId() });
        moKeyUser.requestFocus();
    }

    private void itemStateChangedStatus() {
        setFieldsStatusByStatus();
    }
    
    /*
     * Public methods
     */
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jbComputeTime.addActionListener(this);
        jbSetUser.addActionListener(this);
        moKeyStatus.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbComputeTime.removeActionListener(this);
        jbSetUser.removeActionListener(this);
        moKeyStatus.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyType, SModConsts.PS_PRJ_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyStatus, SModConsts.CS_ST, SModConsts.PU_PRJ, null);
        miClient.getSession().populateCatalogue(moKeyUser, SModConsts.CU_USR, SModConsts.PU_PRJ, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbProject) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            //moRegistry.setCode("");
            
            if (moRegistry.getPkProjectId() == SLibConsts.UNDEFINED) {
                moRegistry.setDateStartPlanned(miClient.getSession().getCurrentDate());
                moRegistry.setDateEndPlanned(miClient.getSession().getCurrentDate());
                moRegistry.setFkProjectTypeId(SModSysConsts.PS_PRJ_TP_DEV);
                moRegistry.setFkProjectStatusId(SModSysConsts.CS_ST_PND);
            }
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyType.setValue(new int[] { moRegistry.getFkProjectTypeId() });
        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moKeyStatus.setValue(new int[] { moRegistry.getFkProjectStatusId() });
        itemStateChangedStatus();
        moDateStartPlanned.setValue(moRegistry.getDateStartPlanned());
        moDateStartReal.setValue(moRegistry.getDateStartReal_n());
        moDateEndPlanned.setValue(moRegistry.getDateEndPlanned());
        moDateEndReal.setValue(moRegistry.getDateEndReal_n());
        moCompTimePlanned.getField().setValue(moRegistry.getTimePlanned());
        moCompTimeReal.getField().setValue(moRegistry.getTimeReal_r());
        moKeyUser.setValue(new int[] { moRegistry.getFkProjectUserId() });

        setFormEditable(true);
        
        setFieldsStatusByStatus();
        
        if (moRegistry.isRegistryNew()) {

        }
        else {

        }
        
        addAllListeners();
    }

    @Override
    public SDbProject getRegistry() throws Exception {
        SDbProject registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setDateStartPlanned(moDateStartPlanned.getValue());
        registry.setDateStartReal_n(moDateStartReal.getValue());
        registry.setDateEndPlanned(moDateEndPlanned.getValue());
        registry.setDateEndReal_n(moDateEndReal.getValue());
        registry.setTimePlanned(moCompTimePlanned.getField().getValue());
        registry.setTimeReal_r(moCompTimeReal.getField().getValue());
        //registry.setDeleted(...);
        //registry.setSystem(...);
        registry.setFkProjectTypeId(moKeyType.getValue()[0]);
        registry.setFkProjectStatusId(moKeyStatus.getValue()[0]);
        registry.setFkProjectUserId(moKeyUser.getValue()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moDateStartPlanned.getValue().after(moDateEndPlanned.getValue())) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateStartPlanned) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "'" + SGuiUtils.getLabelName(jlDateEndPlanned) + "'.");
                validation.setComponent(moDateStartPlanned);
            }
            else if (moDateEndReal.getValue() != null && moDateStartReal.getValue().after(moDateEndReal.getValue())) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateStartReal) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "'" + SGuiUtils.getLabelName(jlDateEndReal) + "'.");
                validation.setComponent(moDateStartReal);
            }
            else if (moKeyStatus.getValue()[0] == SModSysConsts.CS_ST_FIN && moDateStartReal.getValue() == null) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDateStartReal) + "'.");
                validation.setComponent(moDateStartReal.isEditable()? moDateStartReal : moKeyStatus);
            }
            else if (moKeyStatus.getValue()[0] == SModSysConsts.CS_ST_FIN && moDateEndReal.getValue() == null) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDateEndReal) + "'.");
                validation.setComponent(moDateEndReal.isEditable()? moDateEndReal : moKeyStatus);
            }
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbComputeTime) {
                actionComputeTime();
            }
            else if (button == jbSetUser) {
                actionSetUser();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                SBeanFieldKey field = (SBeanFieldKey) e.getSource();
                
                if (field == moKeyStatus) {
                    itemStateChangedStatus();
                }
            }
        }
    }
}
