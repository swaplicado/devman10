/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package devman.mod.prj.form;

import devman.SDevManConsts;
import devman.gui.SGuiMain;
import devman.mod.SModConsts;
import devman.mod.prj.db.SDbProject;
import devman.mod.prj.db.SDbProjectStage;
import devman.mod.prj.db.SDbProjectStagePhase;
import devman.mod.prj.db.SDbProjectStagePhaseActivity;
import devman.mod.prj.db.SDbTask;
import devman.mod.prj.db.SDbTaskLog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormTaskLog extends SBeanForm implements ActionListener {
    
    private SDbTask moTask;
    private SDbTaskLog moRegistry;
    
    /**
     * Creates new form SFormTaskLog
     */
    public SFormTaskLog(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.P_TSK, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jlProject = new javax.swing.JLabel();
        jtfProject = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlProjectStage = new javax.swing.JLabel();
        jtfProjectStage = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlProjectStagePhase = new javax.swing.JLabel();
        jtfProjectStagePhase = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlProjectStagePhaseActivity = new javax.swing.JLabel();
        jtfProjectStagePhaseActivity = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jlTaskType = new javax.swing.JLabel();
        jtfTaskType = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlTaskCode = new javax.swing.JLabel();
        jtfTaskCode = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlTaskName = new javax.swing.JLabel();
        jtfTaskName = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlDateEndPlanned = new javax.swing.JLabel();
        moDateEndPlanned = new sa.lib.gui.bean.SBeanFieldDate();
        jlDummy2 = new javax.swing.JLabel();
        jlDateEndReal = new javax.swing.JLabel();
        moDateEndReal = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel15 = new javax.swing.JPanel();
        jlTimePlanned = new javax.swing.JLabel();
        moCompTimePlanned = new sa.lib.gui.bean.SBeanCompoundField();
        jlTimeReal = new javax.swing.JLabel();
        moCompTimeReal = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel5 = new javax.swing.JPanel();
        jlTaskUser = new javax.swing.JLabel();
        jtfTaskUser = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlLogDate = new javax.swing.JLabel();
        moDateLogDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel7 = new javax.swing.JPanel();
        jlLogTime = new javax.swing.JLabel();
        moCompLogTime = new sa.lib.gui.bean.SBeanCompoundField();
        jbComputeTime = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlWorkType = new javax.swing.JLabel();
        moKeyWorkType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel14 = new javax.swing.JPanel();
        jlWorkUser = new javax.swing.JLabel();
        moKeyWorkUser = new sa.lib.gui.bean.SBeanFieldKey();
        jbCopyUser = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jNotes = new javax.swing.JLabel();
        jspNotes = new javax.swing.JScrollPane();
        jtaNotes = new javax.swing.JTextArea();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la tarea:"));
        jPanel2.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProject.setText("Proyecto:");
        jlProject.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlProject);

        jtfProject.setEditable(false);
        jtfProject.setFocusable(false);
        jtfProject.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel10.add(jtfProject);

        jPanel2.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProjectStage.setText("Etapa:");
        jlProjectStage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlProjectStage);

        jtfProjectStage.setEditable(false);
        jtfProjectStage.setFocusable(false);
        jtfProjectStage.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel12.add(jtfProjectStage);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProjectStagePhase.setText("Fase:");
        jlProjectStagePhase.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlProjectStagePhase);

        jtfProjectStagePhase.setEditable(false);
        jtfProjectStagePhase.setFocusable(false);
        jtfProjectStagePhase.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel13.add(jtfProjectStagePhase);

        jPanel2.add(jPanel13);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProjectStagePhaseActivity.setText("Actividad:");
        jlProjectStagePhaseActivity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlProjectStagePhaseActivity);

        jtfProjectStagePhaseActivity.setEditable(false);
        jtfProjectStagePhaseActivity.setFocusable(false);
        jtfProjectStagePhaseActivity.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel11.add(jtfProjectStagePhaseActivity);

        jPanel2.add(jPanel11);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaskType.setText("Tipo:");
        jlTaskType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlTaskType);

        jtfTaskType.setEditable(false);
        jtfTaskType.setFocusable(false);
        jtfTaskType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel20.add(jtfTaskType);

        jPanel2.add(jPanel20);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaskCode.setText("CÃ³digo:");
        jlTaskCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlTaskCode);

        jtfTaskCode.setEditable(false);
        jtfTaskCode.setFocusable(false);
        jtfTaskCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jtfTaskCode);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaskName.setText("Nombre:");
        jlTaskName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlTaskName);

        jtfTaskName.setEditable(false);
        jtfTaskName.setFocusable(false);
        jtfTaskName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel4.add(jtfTaskName);

        jPanel2.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEndPlanned.setText("Fin planeado:");
        jlDateEndPlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateEndPlanned);

        moDateEndPlanned.setEditable(false);
        moDateEndPlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(moDateEndPlanned);

        jlDummy2.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel8.add(jlDummy2);

        jlDateEndReal.setText("Fin real:");
        jlDateEndReal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateEndReal);

        moDateEndReal.setEditable(false);
        moDateEndReal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(moDateEndReal);

        jPanel2.add(jPanel8);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTimePlanned.setText("Tiempo planeado:");
        jlTimePlanned.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlTimePlanned);

        moCompTimePlanned.setEditable(false);
        moCompTimePlanned.setFocusable(false);
        jPanel15.add(moCompTimePlanned);

        jlTimeReal.setText("Tiempo real:");
        jlTimeReal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlTimeReal);

        moCompTimeReal.setEditable(false);
        moCompTimeReal.setFocusable(false);
        jPanel15.add(moCompTimeReal);

        jPanel2.add(jPanel15);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaskUser.setText("Responsable:");
        jlTaskUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlTaskUser);

        jtfTaskUser.setEditable(false);
        jtfTaskUser.setFocusable(false);
        jtfTaskUser.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(jtfTaskUser);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel16.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLogDate.setText("Fecha:*");
        jlLogDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlLogDate);

        moDateLogDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(moDateLogDate);

        jPanel17.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLogTime.setText("Esfuerzo:*");
        jlLogTime.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlLogTime);
        jPanel7.add(moCompLogTime);

        jbComputeTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/devman/gui/img/icon_std_wizard.gif"))); // NOI18N
        jbComputeTime.setToolTipText("Capturar tiempo");
        jbComputeTime.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbComputeTime);

        jPanel17.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWorkType.setText("Tipo trabajo:*");
        jlWorkType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlWorkType);

        moKeyWorkType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moKeyWorkType);

        jPanel17.add(jPanel9);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWorkUser.setText("Recurso:*");
        jlWorkUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlWorkUser);

        moKeyWorkUser.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(moKeyWorkUser);

        jbCopyUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_copy.gif"))); // NOI18N
        jbCopyUser.setToolTipText("Copiar responsable");
        jbCopyUser.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbCopyUser);

        jPanel17.add(jPanel14);

        jPanel16.add(jPanel17, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel16, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalles del trabajo:"));
        jPanel18.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jNotes.setText("Comentarios:");
        jNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jNotes);

        jPanel18.add(jPanel19, java.awt.BorderLayout.NORTH);

        jspNotes.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jspNotes.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtaNotes.setColumns(20);
        jtaNotes.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jtaNotes.setRows(5);
        jspNotes.setViewportView(jtaNotes);

        jPanel18.add(jspNotes, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel18, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jNotes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbComputeTime;
    private javax.swing.JButton jbCopyUser;
    private javax.swing.JLabel jlDateEndPlanned;
    private javax.swing.JLabel jlDateEndReal;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlLogDate;
    private javax.swing.JLabel jlLogTime;
    private javax.swing.JLabel jlProject;
    private javax.swing.JLabel jlProjectStage;
    private javax.swing.JLabel jlProjectStagePhase;
    private javax.swing.JLabel jlProjectStagePhaseActivity;
    private javax.swing.JLabel jlTaskCode;
    private javax.swing.JLabel jlTaskName;
    private javax.swing.JLabel jlTaskType;
    private javax.swing.JLabel jlTaskUser;
    private javax.swing.JLabel jlTimePlanned;
    private javax.swing.JLabel jlTimeReal;
    private javax.swing.JLabel jlWorkType;
    private javax.swing.JLabel jlWorkUser;
    private javax.swing.JScrollPane jspNotes;
    private javax.swing.JTextArea jtaNotes;
    private javax.swing.JTextField jtfProject;
    private javax.swing.JTextField jtfProjectStage;
    private javax.swing.JTextField jtfProjectStagePhase;
    private javax.swing.JTextField jtfProjectStagePhaseActivity;
    private javax.swing.JTextField jtfTaskCode;
    private javax.swing.JTextField jtfTaskName;
    private javax.swing.JTextField jtfTaskType;
    private javax.swing.JTextField jtfTaskUser;
    private sa.lib.gui.bean.SBeanCompoundField moCompLogTime;
    private sa.lib.gui.bean.SBeanCompoundField moCompTimePlanned;
    private sa.lib.gui.bean.SBeanCompoundField moCompTimeReal;
    private sa.lib.gui.bean.SBeanFieldDate moDateEndPlanned;
    private sa.lib.gui.bean.SBeanFieldDate moDateEndReal;
    private sa.lib.gui.bean.SBeanFieldDate moDateLogDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWorkType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWorkUser;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        moDateLogDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlLogDate), true);
        moCompLogTime.setCompoundFieldSettings(miClient);
        moCompLogTime.getField().setDecimalSettings(SGuiUtils.getLabelName(jlLogTime), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyWorkType.setKeySettings(miClient, SGuiUtils.getLabelName(jlWorkType), true);
        moKeyWorkUser.setKeySettings(miClient, SGuiUtils.getLabelName(jlWorkUser), true);
        
        moDateEndPlanned.setDateSettings(miClient, "", false);
        moDateEndReal.setDateSettings(miClient, "", false);
        moCompTimePlanned.getField().setDecimalSettings("", SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompTimeReal.getField().setDecimalSettings("", SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCompTimePlanned.setCompoundText(SDevManConsts.MAN_HRS);
        moCompTimeReal.setCompoundText(SDevManConsts.MAN_HRS);
        
        moFields.addField(moDateLogDate);
        moFields.addField(moCompLogTime.getField());
        moFields.addField(moKeyWorkType);
        moFields.addField(moKeyWorkUser);
        
        moFields.setFormButton(jbSave);
        
        moCompLogTime.setCompoundText(SDevManConsts.MAN_HRS);
    }
    
    private void actionComputeTime() {
        ((SGuiMain) miClient).computeTime(moCompLogTime.getField());
    }
    
    private void actionCopyUser() {
        moKeyWorkUser.setValue(new int[] { moTask.getFkTaskUserId() });
        moKeyWorkUser.requestFocus();
    }
    
    /*
     * Public methods
     */
    
    public void setTask(final int taskId) {
        SDbProject project = null;
        SDbProjectStage projectStage = null;
        SDbProjectStagePhase projectStagePhase = null;
        SDbProjectStagePhaseActivity projectStagePhaseActivity = null;
        
        moTask = (SDbTask) miClient.getSession().readRegistry(SModConsts.P_TSK, new int[] { taskId });
        
        project = (SDbProject) miClient.getSession().readRegistry(SModConsts.PU_PRJ, new int[] { moTask.getFkActivityProjectId() });
        projectStage = (SDbProjectStage) miClient.getSession().readRegistry(SModConsts.PU_PRJ_STG, new int[] { moTask.getFkActivityProjectId(), moTask.getFkActivityStageId() });
        projectStagePhase = (SDbProjectStagePhase) miClient.getSession().readRegistry(SModConsts.PU_PRJ_STG_PHS, new int[] { moTask.getFkActivityProjectId(), moTask.getFkActivityStageId(), moTask.getFkActivityPhaseId() });
        projectStagePhaseActivity = (SDbProjectStagePhaseActivity) miClient.getSession().readRegistry(SModConsts.PU_PRJ_STG_PHS_ACT, new int[] { moTask.getFkActivityProjectId(), moTask.getFkActivityStageId(), moTask.getFkActivityPhaseId(), moTask.getFkActivityActivityId() });
        
        jtfProject.setText(project.getName());
        jtfProject.setCaretPosition(0);
        jtfProjectStage.setText(projectStage.getName());
        jtfProjectStage.setCaretPosition(0);
        jtfProjectStagePhase.setText(projectStagePhase.getName());
        jtfProjectStagePhase.setCaretPosition(0);
        jtfProjectStagePhaseActivity.setText(projectStagePhaseActivity.getName());
        jtfProjectStagePhaseActivity.setCaretPosition(0);
        jtfTaskType.setText((String) miClient.getSession().readField(SModConsts.PS_TSK_TP, new int[] { moTask.getFkTaskTypeId() }, SDbRegistry.FIELD_NAME));
        jtfTaskType.setCaretPosition(0);
        jtfTaskCode.setText(moTask.getCode());
        jtfTaskCode.setCaretPosition(0);
        jtfTaskName.setText(moTask.getName());
        jtfTaskName.setCaretPosition(0);
        moDateEndPlanned.setValue(moTask.getDateEndPlanned());
        moDateEndReal.setValue(moTask.getDateEndReal_n());
        moCompTimePlanned.getField().setValue(moTask.getTimePlanned());
        moCompTimeReal.getField().setValue(moTask.getTimeReal_r());
        jtfTaskUser.setText((String) miClient.getSession().readField(SModConsts.CU_USR, new int[] { moTask.getFkTaskUserId() }, SDbRegistry.FIELD_NAME));
        jtfTaskUser.setCaretPosition(0);
        
        moKeyWorkUser.setValue(new int[] { moTask.getFkTaskUserId() });
    }
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        jbComputeTime.addActionListener(this);
        jbCopyUser.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbComputeTime.removeActionListener(this);
        jbCopyUser.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyWorkType, SModConsts.PS_WRK_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyWorkUser, SModConsts.CU_USR, SModConsts.P_TSK, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbTaskLog) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            //moRegistry.setCode("");
            
            if (moRegistry.getPkTaskId() == SLibConsts.UNDEFINED) {
                moRegistry.setLogDate(miClient.getSession().getCurrentDate());
            }
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            
            setTask(moRegistry.getPkTaskId());
        }

        moDateLogDate.setValue(moRegistry.getLogDate());
        moCompLogTime.getField().setValue(moRegistry.getLogTime());
        moKeyWorkType.setValue(new int[] { moRegistry.getFkWorkTypeId() });
        moKeyWorkUser.setValue(new int[] { moRegistry.getFkWorkUserId() });
        jtaNotes.setText(moRegistry.getNotes());
        jtaNotes.setCaretPosition(0);

        setFormEditable(true);
        
        if (registry.isRegistryNew()) {}
        
        addAllListeners();
    }

    @Override
    public SDbTaskLog getRegistry() throws Exception {
        SDbTaskLog registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkTaskId(moTask.getPkTaskId());
        }

        registry.setLogDate(moDateLogDate.getValue());
        registry.setLogTime(moCompLogTime.getField().getValue());
        registry.setNotes(SLibUtils.textTrim(jtaNotes.getText()).replaceAll("'", "''"));
        //registry.setDeleted(...);
        //registry.setSystem(...);
        registry.setFkWorkTypeId(moKeyWorkType.getValue()[0]);
        registry.setFkWorkUserId(moKeyWorkUser.getValue()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        return moFields.validateFields();
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SModConsts.P_TSK:
                setTask((int) value);
                break;
            default:
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbComputeTime) {
                actionComputeTime();
            }
            else if (button == jbCopyUser) {
                actionCopyUser();
            }
        }
    }
}
