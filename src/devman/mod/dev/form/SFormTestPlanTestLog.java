/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package devman.mod.dev.form;

import devman.SDevManConsts;
import devman.gui.SGuiMain;
import devman.mod.SModConsts;
import devman.mod.dev.db.SDbTestPlan;
import devman.mod.dev.db.SDbTestPlanTest;
import devman.mod.dev.db.SDbTestPlanTestLog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SFormTestPlanTestLog extends SBeanForm implements ActionListener {

    private SDbTestPlanTestLog moRegistry;
    
    private SDbTestPlanTest moTestPlanTest;
    private SDbTestPlan moTestPlan;
    private int mnTestPlan;
    private int mnTestPlanTest;

    /**
     * Creates new form SFormTestPlanTestLog
     * @param client
     * @param title
     */
    public SFormTestPlanTestLog(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.D_TST_PLN_TST_LOG, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlProject = new javax.swing.JLabel();
        jtfProject = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlProjectStage = new javax.swing.JLabel();
        jtfProjectStage = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlTestPlan = new javax.swing.JLabel();
        jtfTestPlan = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlTestPlanTestCode = new javax.swing.JLabel();
        jtfTestPlanTestCode = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlTestPlanTestName = new javax.swing.JLabel();
        jtfTestPlanTestName = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel7 = new javax.swing.JPanel();
        jlTime = new javax.swing.JLabel();
        moCompTime = new sa.lib.gui.bean.SBeanCompoundField();
        jbComputeTime = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlResultType = new javax.swing.JLabel();
        moKeyResultType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel14 = new javax.swing.JPanel();
        jlResultUser = new javax.swing.JLabel();
        moKeyResultUser = new sa.lib.gui.bean.SBeanFieldKey();
        jbSetUser = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jspNotes = new javax.swing.JScrollPane();
        jtaNotes = new javax.swing.JTextArea();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la prueba:"));
        jPanel2.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlProject.setText("Proyecto:");
        jlProject.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlProject);

        jtfProject.setEditable(false);
        jtfProject.setFocusable(false);
        jtfProject.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(jtfProject);

        jPanel2.add(jPanel8);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlProjectStage.setText("Etapa:");
        jlProjectStage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlProjectStage);

        jtfProjectStage.setEditable(false);
        jtfProjectStage.setFocusable(false);
        jtfProjectStage.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel12.add(jtfProjectStage);

        jPanel2.add(jPanel12);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlTestPlan.setText("Plan pruebas:");
        jlTestPlan.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlTestPlan);

        jtfTestPlan.setEditable(false);
        jtfTestPlan.setFocusable(false);
        jtfTestPlan.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel10.add(jtfTestPlan);

        jPanel2.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlTestPlanTestCode.setText("CÃ³digo:");
        jlTestPlanTestCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlTestPlanTestCode);

        jtfTestPlanTestCode.setEditable(false);
        jtfTestPlanTestCode.setFocusable(false);
        jtfTestPlanTestCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jtfTestPlanTestCode);

        jPanel2.add(jPanel11);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlTestPlanTestName.setText("Nombre:");
        jlTestPlanTestName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlTestPlanTestName);

        jtfTestPlanTestName.setEditable(false);
        jtfTestPlanTestName.setFocusable(false);
        jtfTestPlanTestName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel15.add(jtfTestPlanTestName);

        jPanel2.add(jPanel15);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDate);

        moDateDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(moDateDate);

        jPanel3.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTime.setText("Esfuerzo:*");
        jlTime.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlTime);
        jPanel7.add(moCompTime);

        jbComputeTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/devman/gui/img/icon_std_wizard.gif"))); // NOI18N
        jbComputeTime.setToolTipText("Capturar tiempo");
        jbComputeTime.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbComputeTime);

        jPanel3.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlResultType.setText("Tipo resultado:*");
        jlResultType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlResultType);

        moKeyResultType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(moKeyResultType);

        jPanel3.add(jPanel9);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlResultUser.setText("Recurso:*");
        jlResultUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlResultUser);

        moKeyResultUser.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(moKeyResultUser);

        jbSetUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_copy.gif"))); // NOI18N
        jbSetUser.setToolTipText("Fijar recurso");
        jbSetUser.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbSetUser);

        jPanel3.add(jPanel14);

        jPanel13.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jspNotes.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jspNotes.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspNotes.setPreferredSize(new java.awt.Dimension(505, 150));

        jtaNotes.setColumns(20);
        jtaNotes.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jtaNotes.setRows(5);
        jspNotes.setViewportView(jtaNotes);

        jPanel4.add(jspNotes);

        jPanel13.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel13, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbComputeTime;
    private javax.swing.JButton jbSetUser;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlProject;
    private javax.swing.JLabel jlProjectStage;
    private javax.swing.JLabel jlResultType;
    private javax.swing.JLabel jlResultUser;
    private javax.swing.JLabel jlTestPlan;
    private javax.swing.JLabel jlTestPlanTestCode;
    private javax.swing.JLabel jlTestPlanTestName;
    private javax.swing.JLabel jlTime;
    private javax.swing.JScrollPane jspNotes;
    private javax.swing.JTextArea jtaNotes;
    private javax.swing.JTextField jtfProject;
    private javax.swing.JTextField jtfProjectStage;
    private javax.swing.JTextField jtfTestPlan;
    private javax.swing.JTextField jtfTestPlanTestCode;
    private javax.swing.JTextField jtfTestPlanTestName;
    private sa.lib.gui.bean.SBeanCompoundField moCompTime;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldKey moKeyResultType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyResultUser;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);

        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moCompTime.setCompoundFieldSettings(miClient);
        moCompTime.getField().setDecimalSettings(SGuiUtils.getLabelName(jlTime), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moKeyResultType.setKeySettings(miClient, SGuiUtils.getLabelName(jlResultType), true);
        moKeyResultUser.setKeySettings(miClient, SGuiUtils.getLabelName(jlResultUser), true);

        moFields.addField(moDateDate);
        moFields.addField(moCompTime.getField());
        moFields.addField(moKeyResultType);
        moFields.addField(moKeyResultUser);

        moFields.setFormButton(jbSave);
        
        moCompTime.setCompoundText(SDevManConsts.MAN_HRS);
    }
    
    private void renderTestPlanTest() {
        if (mnTestPlan != SLibConsts.UNDEFINED) {
            moTestPlanTest = (SDbTestPlanTest) miClient.getSession().readRegistry(SModConsts.D_TST_PLN_TST, new int[] { mnTestPlan, mnTestPlanTest }, SDbConsts.MODE_VERBOSE);
            moTestPlan = (SDbTestPlan) miClient.getSession().readRegistry(SModConsts.D_TST_PLN, new int[] { mnTestPlan }, SDbConsts.MODE_VERBOSE);
        }
        
        if (moTestPlan == null) {
            jtfProject.setText("");
            jtfProjectStage.setText("");
            jtfTestPlan.setText("");
        }
        else {
            jtfProject.setText(miClient.getSession().readField(SModConsts.PU_PRJ, new int[] { moTestPlan.getFkStageProjectId() }, SDbRegistry.FIELD_NAME) + "");
            jtfProject.setCaretPosition(0);
            jtfProjectStage.setText(miClient.getSession().readField(SModConsts.PU_PRJ_STG, new int[] { moTestPlan.getFkStageProjectId(), moTestPlan.getFkStageStageId() }, SDbRegistry.FIELD_NAME) + "");
            jtfProjectStage.setCaretPosition(0);
            jtfTestPlan.setText(moTestPlan.getName());
            jtfTestPlan.setCaretPosition(0);
        }
        
        if (moTestPlanTest == null) {
            jtfTestPlanTestCode.setText("");
            jtfTestPlanTestName.setText("");
        }
        else {
            jtfTestPlanTestCode.setText(moTestPlanTest.getCode());
            jtfTestPlanTestCode.setCaretPosition(0);
            jtfTestPlanTestName.setText(moTestPlanTest.getName());
            jtfTestPlanTestName.setCaretPosition(0);
        }
    }
    
    private void actionComputeTime() {
        ((SGuiMain) miClient).computeTime(moCompTime.getField());
    }
    
    private void actionSetUser() {
        moKeyResultUser.setValue(new int[] { miClient.getSession().getUser().getPkUserId() });
        moKeyResultUser.requestFocus();
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbComputeTime.addActionListener(this);
        jbSetUser.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbComputeTime.removeActionListener(this);
        jbSetUser.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyResultType, SModConsts.DS_TST_RES_TP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyResultUser, SModConsts.CU_USR, SModConsts.P_TSK, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbTestPlanTestLog) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        moTestPlanTest = null;
        moTestPlan = null;
        mnTestPlan = 0;
        mnTestPlanTest = 0;

        removeAllListeners();
        reloadCatalogues();
        
        mnTestPlan = moRegistry.getPkPlanId();
        mnTestPlanTest = moRegistry.getPkTestId();

        if (moRegistry.isRegistryNew()) {
            //moRegistry.setCode("");
            
            if (moRegistry.getPkPlanId() == SLibConsts.UNDEFINED) {
                moRegistry.setLogDate(miClient.getSession().getCurrentDate());
            }
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        renderTestPlanTest();
        moDateDate.setValue(moRegistry.getLogDate());
        moCompTime.getField().setValue(moRegistry.getLogTime());
        moKeyResultType.setValue(new int[] { moRegistry.getFkResultTypeId() });
        moKeyResultUser.setValue(new int[] { moRegistry.getFkResultUserId() });
        jtaNotes.setText(moRegistry.getNotes());
        jtaNotes.setCaretPosition(0);

        setFormEditable(true);
        
        if (registry.isRegistryNew()) {}
        
        addAllListeners();
    }

    @Override
    public SDbTestPlanTestLog getRegistry() throws Exception {
        SDbTestPlanTestLog registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkPlanId(moTestPlanTest.getPkPlanId());
            registry.setPkTestId(moTestPlanTest.getPkTestId());
        }

        registry.setLogDate(moDateDate.getValue());
        registry.setLogTime(moCompTime.getField().getValue());
        registry.setNotes(SLibUtils.textTrim(jtaNotes.getText()).replaceAll("'", "''"));
        registry.setFkResultTypeId(moKeyResultType.getValue()[0]);
        registry.setFkResultUserId(moKeyResultUser.getValue()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        return moFields.validateFields();
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SModConsts.D_TST_PLN_TST:
                mnTestPlan = ((int[]) value)[0];
                mnTestPlanTest = ((int[]) value)[1];
                
                renderTestPlanTest();
                break;
            default:
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbComputeTime) {
                actionComputeTime();
            }
            else if (button == jbSetUser) {
                actionSetUser();
            }
        }
    }
}
