/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package devman.mod.dev.form;

import devman.mod.SModConsts;
import devman.mod.dev.db.SDbRequirement;
import devman.mod.dev.db.SDbTrace;
import devman.mod.dev.db.SDbTraceLog;
import devman.mod.prj.db.SDbProject;
import devman.mod.prj.db.SDbProjectStage;
import devman.mod.prj.db.SDbProjectStagePhase;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Vector;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDlgTraceLog extends SBeanFormDialog {
    
    private SGridPaneForm moGridLog;

    /**
     * Creates new form SDlgTraceLog
     */
    public SDlgTraceLog(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.XX_GUI_LOG, SModConsts.D_TRC_LOG, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpRegistry = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlProject = new javax.swing.JLabel();
        jtfProjectName = new javax.swing.JTextField();
        jtfProjectCode = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlProjectStage = new javax.swing.JLabel();
        jtfProjectStageName = new javax.swing.JTextField();
        jtfProjectStageCode = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlProjectStagePhase = new javax.swing.JLabel();
        jtfProjectStagePhaseName = new javax.swing.JTextField();
        jtfProjectStagePhaseCode = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlRequirement = new javax.swing.JLabel();
        jtfRequirementName = new javax.swing.JTextField();
        jtfRequirementCode = new javax.swing.JTextField();
        jpLog = new javax.swing.JPanel();

        setTitle("Bitácora");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro de rastreo:"));
        jpRegistry.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProject.setText("Proyecto:");
        jlProject.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlProject);

        jtfProjectName.setEditable(false);
        jtfProjectName.setFocusable(false);
        jtfProjectName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel4.add(jtfProjectName);

        jtfProjectCode.setEditable(false);
        jtfProjectCode.setFocusable(false);
        jtfProjectCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jtfProjectCode);

        jpRegistry.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProjectStage.setText("Etapa:");
        jlProjectStage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlProjectStage);

        jtfProjectStageName.setEditable(false);
        jtfProjectStageName.setFocusable(false);
        jtfProjectStageName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(jtfProjectStageName);

        jtfProjectStageCode.setEditable(false);
        jtfProjectStageCode.setFocusable(false);
        jtfProjectStageCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jtfProjectStageCode);

        jpRegistry.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProjectStagePhase.setText("Fase:");
        jlProjectStagePhase.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlProjectStagePhase);

        jtfProjectStagePhaseName.setEditable(false);
        jtfProjectStagePhaseName.setFocusable(false);
        jtfProjectStagePhaseName.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(jtfProjectStagePhaseName);

        jtfProjectStagePhaseCode.setEditable(false);
        jtfProjectStagePhaseCode.setFocusable(false);
        jtfProjectStagePhaseCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jtfProjectStagePhaseCode);

        jpRegistry.add(jPanel7);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRequirement.setText("Requerimiento:");
        jlRequirement.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlRequirement);

        jtfRequirementName.setEditable(false);
        jtfRequirementName.setFocusable(false);
        jtfRequirementName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel5.add(jtfRequirementName);

        jtfRequirementCode.setEditable(false);
        jtfRequirementCode.setFocusable(false);
        jtfRequirementCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfRequirementCode);

        jpRegistry.add(jPanel5);

        jPanel1.add(jpRegistry, java.awt.BorderLayout.NORTH);

        jpLog.setBorder(javax.swing.BorderFactory.createTitledBorder("Entradas de la bitácora:"));
        jpLog.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jpLog, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlProject;
    private javax.swing.JLabel jlProjectStage;
    private javax.swing.JLabel jlProjectStagePhase;
    private javax.swing.JLabel jlRequirement;
    private javax.swing.JPanel jpLog;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JTextField jtfProjectCode;
    private javax.swing.JTextField jtfProjectName;
    private javax.swing.JTextField jtfProjectStageCode;
    private javax.swing.JTextField jtfProjectStageName;
    private javax.swing.JTextField jtfProjectStagePhaseCode;
    private javax.swing.JTextField jtfProjectStagePhaseName;
    private javax.swing.JTextField jtfRequirementCode;
    private javax.swing.JTextField jtfRequirementName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        moFields.setFormButton(jbCancel);
        
        jbCancel.setText(SGuiConsts.TXT_BTN_CLOSE);
        jbSave.setText(SGuiConsts.TXT_BTN_OK);
        jbSave.setEnabled(false);
        
        moGridLog = new SGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, SGridConsts.COL_TITLE_TYPE));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_L, SGridConsts.COL_TITLE_NAME));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, SGridConsts.COL_TITLE_CODE));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Notas", 250));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_INS_NAME));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_INS_TS));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, SGridConsts.COL_TITLE_USER_UPD_NAME));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, SGridConsts.COL_TITLE_USER_UPD_TS));
                
                return columns;
            }
        };
        
        jpLog.add(moGridLog, BorderLayout.CENTER);
        
        mvFormGrids.add(moGridLog);
    }
    
    /*
     * Private methods
     */
    
    /*
     * Public methods
     */
    
    public void setTrace(SDbTrace trace) {
        Vector<SGridRow> rows = new Vector<>();
        SDbProject project = (SDbProject) miClient.getSession().readRegistry(SModConsts.PU_PRJ, new int[] { trace.getPkProjectId() });
        SDbProjectStage projectStage = (SDbProjectStage) miClient.getSession().readRegistry(SModConsts.PU_PRJ_STG, new int[] { trace.getFkPhaseProjectId(), trace.getFkPhaseStageId() });
        SDbProjectStagePhase projectStagePhase = (SDbProjectStagePhase) miClient.getSession().readRegistry(SModConsts.PU_PRJ_STG_PHS, new int[] { trace.getFkPhaseProjectId(), trace.getFkPhaseStageId(), trace.getFkPhasePhaseId() });
        SDbRequirement requirement = (SDbRequirement) miClient.getSession().readRegistry(SModConsts.DU_REQ, new int[] { trace.getFkRequirementProjectId(), trace.getFkRequirementRequirementId() });
        
        jtfProjectName.setText(project.getName());
        jtfProjectName.setCaretPosition(0);
        jtfProjectCode.setText(project.getCode());
        jtfProjectCode.setCaretPosition(0);
        
        jtfProjectStageName.setText(projectStage.getName());
        jtfProjectStageName.setCaretPosition(0);
        jtfProjectStageCode.setText(projectStage.getCode());
        jtfProjectStageCode.setCaretPosition(0);
        
        jtfProjectStagePhaseName.setText(projectStagePhase.getName());
        jtfProjectStagePhaseName.setCaretPosition(0);
        jtfProjectStagePhaseCode.setText(projectStagePhase.getCode());
        jtfProjectStagePhaseCode.setCaretPosition(0);
        
        jtfRequirementName.setText(requirement.getName());
        jtfRequirementName.setCaretPosition(0);
        jtfRequirementCode.setText(requirement.getCode());
        jtfRequirementCode.setCaretPosition(0);
        
        try {
            for (SDbTraceLog log : trace.readLogs(miClient.getSession())) {
                rows.add((SGridRow) log);
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        
        moGridLog.populateGrid(rows);
    }
    
    /*
     * Overriden methods
     */
    
    @Override
    public void addAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void resetForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SModConsts.D_TRC:
                setTrace((SDbTrace) value);
                break;
            default:
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
